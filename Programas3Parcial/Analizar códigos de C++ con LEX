%{
#include <stdio.h>
#include <string.h>

// Contadores
int contador_comentarios = 0;
%}

%option noyywrap

// Expresiones regulares para identificar patrones
PALABRAS_RESERVADAS   (auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|restrict|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)
IDENTIFICADORES        [a-zA-Z_][a-zA-Z0-9_]*
CONSTANTES_NUMERICAS   [0-9]+(\.[0-9]+)?
OPERADORES_ARITMETICOS [\+\-\*/%]
OPERADORES_LOGICOS     (\|\||&&|!)
SIMBOLOS_ESPECIALES    [;,\(\)\{\}\[\]]
COMENTARIO_SIMPLE      \/\/.*
COMENTARIO_MULTILINEA  \/[*](.|\n)*?[*]\/

%%

// Palabras reservadas
{PALABRAS_RESERVADAS}   { printf("Palabra reservada: %s\n", yytext); }

// Comentarios
{COMENTARIO_SIMPLE}     { contador_comentarios++; }
{COMENTARIO_MULTILINEA} { contador_comentarios++; }

// Identificadores (variables)
{IDENTIFICADORES}       { printf("Identificador: %s\n", yytext); }

// Constantes numéricas
{CONSTANTES_NUMERICAS}  { printf("Constante numérica: %s\n", yytext); }

// Operadores aritméticos
{OPERADORES_ARITMETICOS} { printf("Operador aritmético: %s\n", yytext); }

// Operadores lógicos
{OPERADORES_LOGICOS}    { printf("Operador lógico: %s\n", yytext); }

// Símbolos especiales
{SIMBOLOS_ESPECIALES}   { printf("Símbolo especial: %s\n", yytext); }

// Ignorar espacios y tabs
[ \t\n]+                { /* Ignorar */ }

.                       { printf("Caracter no identificado: %s\n", yytext); }

%%

int main(int argc, char **argv) {
    if (argc > 1) {
        FILE *archivo = fopen(argv[1], "r");
        if (!archivo) {
            perror("Error al abrir el archivo");
            return 1;
        }
        yyin = archivo;
    }
    yylex();
    printf("Total de comentarios encontrados: %d\n", contador_comentarios);
    return 0;
}

